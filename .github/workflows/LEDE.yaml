name: LEDE_x86_64

on: 
  workflow_dispatch:
    inputs:
      ssh_debug:
        description: "是否开启SSH调试功能:"
        required: false
        default: "关闭"
        type: choice
        options:
          - 关闭
          - 开启

      ssh_time1:
        description: "SSH调试设置:开始编译前暂停时间(分钟):"
        required: false
        default: "30"
        type: string

      ssh_time2:
        description: "SSH调试设置:编译报错后暂停时间(分钟):"
        required: false
        default: "340"
        type: string

  schedule:
    - cron: 0 0 1,15 * *

env:
  BD_PROJECT: 'lede'       # 项目名称
  BD_TARGET: 'x86_64'      # 编译目标
  REPO_URL: 'https://github.com/coolsnowwolf/lede'  # 项目地址
  REPO_BRANCH: 'master'    # 项目分支
  TARGET_PLATFORM: 'amd64' # 平台架构
  CACHE_CCACHE: 'false'    # 是否开启ccache
  CACHE_CLEAN: 'false'     # 是否清除缓存
  UPLOAD_ARTIFACT: 'false' # 是否上传到Artifact
  UPLOAD_RELEASE: 'true'   # 是否上传到Release

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Fix workspace permissions
      run: |
        sudo chown -R $USER:$USER $GITHUB_WORKSPACE
        sudo chmod -R 755 $GITHUB_WORKSPACE

    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q` || true
        rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        apt-mark hold grub-efi-amd64-signed
        apt update
        apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* snap*
        apt -y full-upgrade
        apt-get -qq install btop build-essential clang flex g++ gawk gcc-multilib gettext git libncurses5-dev libssl-dev python3-distutils python3-pyelftools python3-setuptools libpython3-dev rsync unzip zlib1g-dev swig aria2 jq subversion qemu-utils ccache rename libelf-dev device-tree-compiler libgnutls28-dev coccinelle libgmp3-dev libmpc-dev libfuse-dev ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libc6-dev libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 libncursesw5-dev libreadline-dev libssl-dev libtool lld llvm lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        apt -y autoremove --purge
        apt clean
        timedatectl set-timezone "Asia/Shanghai"

    - name: Environment Customization
      run: |
        if [ "${{ github.event.inputs.ssh_debug }}" == "开启" ]; then
          echo "SSH_DEBUG=true" >> $GITHUB_ENV
          echo "SSH_TIME=${{ github.event.inputs.ssh_time1 }}" >> $GITHUB_ENV
          echo "SSH_TIME2=${{ github.event.inputs.ssh_time2 }}" >> $GITHUB_ENV
          echo "=====================已开启SSH调试功能===================="
        else
          echo "SSH_DEBUG=false" >> $GITHUB_ENV
        fi

    - name: Clone source code
      run: |
        git clone --depth 1 ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} ${{ env.BD_PROJECT }}
        git clone https://github.com/coolsnowwolf/packages ${{ env.BD_PROJECT }}/package/lean
        chmod -R 755 ${{ env.BD_PROJECT }}

    - name: Free up disk space
      run: |
        mkdir -p -m 777 /mnt/${{ env.BD_PROJECT }}/dl /mnt/${{ env.BD_PROJECT }}/bin /mnt/${{ env.BD_PROJECT }}/staging_dir /mnt/${{ env.BD_PROJECT }}/build_dir
        ln -sf /mnt/${{ env.BD_PROJECT }}/dl ${{ env.BD_PROJECT }}/dl
        ln -sf /mnt/${{ env.BD_PROJECT }}/bin ${{ env.BD_PROJECT }}/bin
        ln -sf /mnt/${{ env.BD_PROJECT }}/staging_dir ${{ env.BD_PROJECT }}/staging_dir
        ln -sf /mnt/${{ env.BD_PROJECT }}/build_dir ${{ env.BD_PROJECT }}/build_dir

    - name: Cache
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: ${{ env.CACHE_CCACHE }}
        mixkey: ${{ env.BD_PROJECT }}_${{ env.BD_TARGET }}_${{ env.REPO_BRANCH }}
        clean: ${{ env.CACHE_CLEAN }}
        prefix: ${{ github.workspace }}/${{ env.BD_PROJECT }}
        
    - name: Update & Install feeds
      working-directory: ./${{ env.BD_PROJECT }}
      run: |
        cat > feeds.conf <<EOF
        src-git packages https://github.com/openwrt/packages.git
        src-git luci https://github.com/openwrt/luci.git
        src-git lean https://github.com/coolsnowwolf/packages.git
        EOF
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        chmod +x $GITHUB_WORKSPACE/customize/*.sh
        $GITHUB_WORKSPACE/customize/${{ env.BD_PROJECT }}_${{ env.BD_TARGET }}.sh

    - name: Configuration
      working-directory: ./${{ env.BD_PROJECT }}
      run: |
        [ -e ../config/${{ env.BD_PROJECT }}_${{ env.BD_TARGET }}.config ] && cp ../config/${{ env.BD_PROJECT }}_${{ env.BD_TARGET }}.config .config
        [ "${{ env.CACHE_CCACHE }}" == 'true' ] && echo 'CONFIG_CCACHE=y' >> .config
        make defconfig

    # 后续步骤保持不变（SSH调试、编译、上传等）
    # ... 原有其他步骤 ...
